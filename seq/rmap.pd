#N canvas 1920 30 2560 1566 10;
#N canvas 1920 30 2560 1566 \$0-receives 0;
#X obj 0 400 outlet;
#X restore 201 540 pd \$0-receives;
#X obj 201 560 outlet;
#X obj 234 223 inlet;
#X obj 201 360 list-drip;
#X obj 201 380 t a b;
#X text 324 175 rmap - receive map;
#X text 324 301 output: [number] [value];
#X obj 234 289 list;
#X obj 234 309 t a b;
#X obj 201 400 symbol;
#X msg 261 360 0;
#X obj 314 360 f \$0;
#X obj 371 92 namecanvas \$0-rmap;
#X obj 261 400 * 2;
#X obj 240 446 + 1;
#X obj 264 446 + 2;
#X obj 201 471 pack s f f f f \$0;
#X obj 288 446 * 70;
#X msg 201 491 \; pd-\$6-receives obj \$5 10 r \$1 \, obj \$5 29 prepent \$2 \, connect \$3 0 \$4 0 \, connect \$4 0 0 0;
#X msg 314 380 \; pd-\$1-receives clear \, obj 0 400 outlet \; \$1-rmap connect 0 0 1 0;
#X text 324 195 dynamically generates receives for each of its arguments. any messages that the receives receive are prepended with a unique number so that the output of [rmap] can be separated by using [route].;
#X text 324 248 this uses dynamic patching \, so you should probably copy and paste the generated objects from inside the [pd 0-receives] subpatch instead of leaving an [rmap] in your abstractions or patches.;
#X obj 261 380 int;
#X obj 285 380 + 1;
#X obj 173 223 pdcontrol;
#X obj 173 183 loadbang;
#X msg 173 203 args;
#X connect 0 0 1 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 9 0;
#X connect 4 1 22 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 8 1 10 0;
#X connect 8 1 11 0;
#X connect 9 0 16 0;
#X connect 10 0 22 0;
#X connect 11 0 19 0;
#X connect 13 0 14 0;
#X connect 13 0 15 0;
#X connect 14 0 16 2;
#X connect 15 0 16 3;
#X connect 16 0 18 0;
#X connect 17 0 16 4;
#X connect 22 0 13 0;
#X connect 22 0 16 1;
#X connect 22 0 17 0;
#X connect 22 0 23 0;
#X connect 23 0 22 1;
#X connect 24 0 7 0;
#X connect 25 0 26 0;
#X connect 26 0 24 0;
